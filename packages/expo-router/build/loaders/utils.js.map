{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/loaders/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2025 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Convert a route pathname to a loader module path.\n *\n * Examples:\n * - `/` becomes `/_expo/loaders/index.js`\n * - `/posts/1` becomes `/_expo/loaders/posts/1.js`\n * - `/about` becomes `/_expo/loaders/about.js`\n */\nexport function getLoaderModulePath(pathname: string): string {\n  const cleanPath = new URL(pathname, 'http://localhost').pathname;\n  const normalizedPath = cleanPath === '/' ? '/' : cleanPath.replace(/\\/$/, '');\n  const pathSegment = normalizedPath === '/' ? '/index' : normalizedPath;\n\n  return `/_expo/loaders${pathSegment}.js`;\n}\n\n/**\n * Convert a loader module path back to a route pathname.\n * This is the inverse operation of `getLoaderModulePath()`.\n *\n * Examples:\n * - `/_expo/loaders/index.js` becomes `/`\n * - `/_expo/loaders/posts/1.js` becomes `/posts/1`\n * - `/_expo/loaders/about.js` becomes `/about`\n */\nexport function getRoutePathFromLoaderPath(loaderPath: string): string {\n  return (\n    loaderPath.replace('/_expo/loaders', '').replace(/\\.js$/, '').replace('/index', '/') || '/'\n  );\n}\n\n/**\n * Attempts to construct a fallback loader path using route segments from `useSegments()`.\n * Only works with dynamic segments.\n */\nfunction constructFallbackLoaderPath(routePath: string, segments?: string[]): string | null {\n  if (segments && segments.length > 0) {\n    // If we have segments with bracket notation, use them directly\n    const hasAnyDynamicSegments = segments.some(\n      (segment) => segment.includes('[') && segment.includes(']')\n    );\n    if (hasAnyDynamicSegments) {\n      const fallbackPath = '/' + segments.join('/');\n      return fallbackPath !== routePath ? fallbackPath : null;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Fetches and parses a single loader module from the given path.\n */\nasync function fetchAndParseLoaderModule(loaderPath: string): Promise<any> {\n  const response = await fetch(loaderPath);\n  if (response.ok) {\n    const text = await response.text();\n\n    // Modules are generated as: export default {json}\n    const match = text.match(/export default (.+)$/m);\n    if (match) {\n      return JSON.parse(match[1]);\n    }\n\n    throw new Error('Invalid loader module format');\n  }\n  throw new Error(`Failed to fetch loader data: ${response.status}`);\n}\n\n/**\n * Attempts to fetch fallback loader data if the original request fails.\n */\nasync function tryFallbackLoader(routePath: string, segments?: string[]): Promise<any | null> {\n  const fallbackRoutePath = constructFallbackLoaderPath(routePath, segments);\n  if (!fallbackRoutePath) return null;\n\n  const fallbackLoaderPath = getLoaderModulePath(fallbackRoutePath);\n  try {\n    return await fetchAndParseLoaderModule(fallbackLoaderPath);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Fetches and parses a loader module from the given route path.\n * This works in all environments including:\n * 1. Development with Metro dev server (see `LoaderModuleMiddleware`)\n * 2. Production with static files (SSG)\n * 3. SSR environments\n *\n * Optimizes for dynamic routes by detecting them upfront and loading a\n * fallback directly, avoiding unnecessary 404 requests.\n */\nexport async function fetchLoaderModule(routePath: string, segments?: string[]): Promise<any> {\n  const loaderPath = getLoaderModulePath(routePath);\n\n  // TODO(@hassankhan): Consider racing promises for potential dynamic routes\n  try {\n    return await fetchAndParseLoaderModule(loaderPath);\n  } catch (error) {\n    const fallbackData = await tryFallbackLoader(routePath, segments);\n    if (fallbackData) return fallbackData;\n\n    throw error;\n  }\n}\n"]}